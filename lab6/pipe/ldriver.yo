                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f49808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f61806000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f71004000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # 张政童　516030910024
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	
                            | 	
                            | 	
                            | 	#description:
                            | 	#1.Use iaddq to replace irmovq+addq.
                            | 	#2.Use unrolling Loops,define k = 10, each time operate 10 elements.
                            | 	#3.If the rest element is less than k, use jump table to deal with
                            | 	#  it only one time.
                            | 	#4.Use reading two elements each time to solve the load/use hazard.
0x032: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx # len > k-1 (10-1) ?
0x03c: 765800000000000000   | 	jg Loop1 # if so, goto Loop1
0x045: 6022                 | 	addq %rdx, %rdx # rdx range [-8,0]
0x047: 6022                 | 	addq %rdx, %rdx
0x049: 6022                 | 	addq %rdx, %rdx # len = 8 * len
0x04b: 50920004000000000000 | 	mrmovq elem9(%rdx), %r9 #find the destination in table
0x055: a09f                 | 	pushq %r9
0x057: 90                   | 	ret #jmp to destination
0x058:                      | Loop1:
0x058: 50870000000000000000 | 	mrmovq (%rdi), %r8 # read val from src...
0x062: 50170800000000000000 | 	mrmovq 8(%rdi), %rcx
0x06c: 40860000000000000000 | 	rmmovq %r8, (%rsi) # ...and store it to dst
0x076: 6288                 | 	andq %r8, %r8 # val <= 0 ?
0x078: 718b00000000000000   | 	jle ele1 # if so, goto ele1
0x081: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x08b:                      | ele1:
0x08b: 40160800000000000000 | 	rmmovq %rcx, 8(%rsi) # ...and store it to dst
0x095: 6211                 | 	andq %rcx, %rcx # val <=0 ?
0x097: 71aa00000000000000   | 	jle ele2 #if so, goto ele2
0x0a0: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x0aa:                      | ele2:
0x0aa: 50871000000000000000 | 	mrmovq 16(%rdi), %r8 # read val from src...
0x0b4: 50171800000000000000 | 	mrmovq 24(%rdi), %rcx
0x0be: 40861000000000000000 | 	rmmovq %r8, 16(%rsi) #...and store it to dst
0x0c8: 6288                 | 	andq %r8, %r8 # val <= 0?
0x0ca: 71dd00000000000000   | 	jle ele3 #if so, goto ele3
0x0d3: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x0dd:                      | ele3:
0x0dd: 40161800000000000000 | 	rmmovq %rcx, 24(%rsi) # ...and store it to dst
0x0e7: 6211                 | 	andq %rcx, %rcx # val <= 0 ?
0x0e9: 71fc00000000000000   | 	jle ele4 #if so, goto ele4
0x0f2: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x0fc:                      | ele4:
0x0fc: 50872000000000000000 | 	mrmovq 32(%rdi), %r8 # read val from src...
0x106: 50172800000000000000 | 	mrmovq 40(%rdi), %rcx
0x110: 40862000000000000000 | 	rmmovq %r8, 32(%rsi) # ...and store it to dst
0x11a: 6288                 | 	andq %r8, %r8 # val <=0 ?
0x11c: 712f01000000000000   | 	jle ele5 # ifso, goto ele5
0x125: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x12f:                      | ele5:
0x12f: 40162800000000000000 | 	rmmovq %rcx, 40(%rsi) #... and store it to dst
0x139: 6211                 | 	andq %rcx, %rcx # val <= 0 ?
0x13b: 714e01000000000000   | 	jle ele6 # if so, goto ele6
0x144: c0f00100000000000000 | 	iaddq $1, %rax # count++ 
0x14e:                      | ele6:
0x14e: 50873000000000000000 | 	mrmovq 48(%rdi), %r8 # read val from src...
0x158: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
0x162: 40863000000000000000 | 	rmmovq %r8, 48(%rsi) # ....and store it to dst
0x16c: 6288                 | 	andq %r8, %r8 #val <= 0 ?
0x16e: 718101000000000000   | 	jle ele7 #if so, goto ele7
0x177: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x181:                      | ele7:
0x181: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi) # ...and store it to dst
0x18b: 6211                 | 	andq %rcx, %rcx # val <= 0 ?
0x18d: 71a001000000000000   | 	jle ele8 # if so, goto ele8
0x196: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x1a0:                      | ele8:
0x1a0: 50874000000000000000 | 	mrmovq 64(%rdi), %r8 # read val from src...
0x1aa: 50174800000000000000 | 	mrmovq 72(%rdi), %rcx
0x1b4: 40864000000000000000 | 	rmmovq %r8, 64(%rsi) # ...and store it to dst
0x1be: 6288                 | 	andq %r8, %r8 # val <= 0 ?
0x1c0: 71d301000000000000   | 	jle ele9 # if so, goto ele9
0x1c9: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x1d3:                      | ele9:
0x1d3: 40164800000000000000 | 	rmmovq %rcx, 72(%rsi) # ...and store it to dst
0x1dd: 6211                 | 	andq %rcx, %rcx # val <= 0 ?
0x1df: 71f201000000000000   | 	jle Update # if so, goto Update
0x1e8: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x1f2:                      | Update:
0x1f2: c0f75000000000000000 | 	iaddq $80, %rdi # update src
0x1fc: c0f65000000000000000 | 	iaddq $80, %rsi # update dst
0x206: c0f2f6ffffffffffffff | 	iaddq $-10, %rdx # len - k > 0 ?
0x210: 765800000000000000   | 	jg Loop1 # if so, not jmp, into Rest2
0x219:                      | Rest2:
0x219: 6022                 | 	addq %rdx, %rdx
0x21b: 6022                 | 	addq %rdx, %rdx
0x21d: 6022                 | 	addq %rdx, %rdx # len = 8 * len
0x21f: 50a20004000000000000 | 	mrmovq elem9(%rdx), %r10 # find the destination in the table
0x229: a0af                 | 	pushq %r10 
0x22b: 90                   | 	ret #jmp to the destination
0x22c:                      | L9:
0x22c: 50874000000000000000 | 	mrmovq 64(%rdi), %r8 # read val from src...
0x236: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx
0x240: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
                            | 	#jle L91
0x242: 40864000000000000000 | 	rmmovq %r8, 64(%rsi) # ...and store it to dst
0x24c: 715f02000000000000   | 	jle L8 # if so, goto L8
0x255: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x25f:                      | L91:
                            | 	#rmmovq %r8, 64(%rsi)
0x25f:                      | L8:
0x25f: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx # read val from src...
0x269: 6211                 | 	andq %rcx, %rcx # val <= 0 ? 
                            | 	#rmmovq %r8, 56(%rsi) # ...and store it to dst
0x26b: 717e02000000000000   | 	jle L81 # if so, goto L9
0x274: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x27e:                      | L81:
0x27e: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)
0x288:                      | L7:
0x288: 50873000000000000000 | 	mrmovq 48(%rdi), %r8 # read val from src..
0x292: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
0x294: 40863000000000000000 | 	rmmovq %r8, 48(%rsi) # ...and store it to dst
0x29e: 71b102000000000000   | 	jle L6 # if so, goto L6
0x2a7: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x2b1:                      | L6:
0x2b1: 50872800000000000000 | 	mrmovq 40(%rdi), %r8 # read val from src...
0x2bb: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
0x2bd: 40862800000000000000 | 	rmmovq %r8, 40(%rsi) # ...and store it to dst
0x2c7: 71da02000000000000   | 	jle L5 #if so, goto L5
0x2d0: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x2da:                      | L5:
0x2da: 50872000000000000000 | 	mrmovq 32(%rdi), %r8 # read val from src...
0x2e4: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
0x2e6: 40862000000000000000 | 	rmmovq %r8, 32(%rsi) # ..and store it to dst
0x2f0: 710303000000000000   | 	jle L4 # if so, goto L4
0x2f9: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x303:                      | L4:
0x303: 50871800000000000000 | 	mrmovq 24(%rdi), %r8 # read val from src...
0x30d: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
0x30f: 40861800000000000000 | 	rmmovq %r8, 24(%rsi) # ... and store it to dst
0x319: 712c03000000000000   | 	jle L3 # if so, goto L3
0x322: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x32c:                      | L3:
0x32c: 50871000000000000000 | 	mrmovq 16(%rdi), %r8 # read val from src...
0x336: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
0x338: 40861000000000000000 | 	rmmovq %r8, 16(%rsi) # ... and store it to dst
0x342: 715503000000000000   | 	jle L2 # if so, goto L2
0x34b: c0f00100000000000000 | 	iaddq $1, %rax # count++
0x355:                      | L2:
0x355: 50870800000000000000 | 	mrmovq 8(%rdi), %r8 # read val from src...
0x35f: 50170000000000000000 | 	mrmovq (%rdi), %rcx
0x369: 6288                 | 	andq %r8, %r8 # val <= 0 ? 
0x36b: 40860800000000000000 | 	rmmovq %r8, 8(%rsi) # ... and store it to dst
0x375: 718803000000000000   | 	jle L1 # if so, goto L1
0x37e: c0f00100000000000000 | 	iaddq $1, %rax # count ++
0x388:                      | L1:
0x388: 50170000000000000000 | 	mrmovq (%rdi), %rcx # read val from src...
0x392: 6211                 | 	andq %rcx, %rcx # val <= 0 ? 
0x394: 40160000000000000000 | 	rmmovq %rcx, (%rsi) # ... and store it to dst
0x39e: 71b103000000000000   | 	jle done # if so, goto Done
0x3a7: c0f00100000000000000 | 	iaddq $1, %rax # count ++
0x3b1:                      | done:
0x3b1: 90                   | 	ret # the end of the program
0x3b8:                      | 	.align 8
0x3b8: 0804000000000000     | 		.quad Done #jump table
0x3c0: 8803000000000000     | 		.quad L1 #Lx, x means the position of the element
0x3c8: 5503000000000000     | 		.quad L2
0x3d0: 2c03000000000000     | 		.quad L3
0x3d8: 0303000000000000     | 		.quad L4
0x3e0: da02000000000000     | 		.quad L5
0x3e8: b102000000000000     | 		.quad L6
0x3f0: 8802000000000000     | 		.quad L7
0x3f8: 5f02000000000000     | 		.quad L8 
0x400: 2c02000000000000     | elem9:.quad L9
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x408:                      | Done:
0x408: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
                            | #End:
                            | ##/* $end ncopy-ys */
0x409:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x410:                      | 	.align 8
0x410:                      | src:
0x410: ffffffffffffffff     | 	.quad -1
0x418: feffffffffffffff     | 	.quad -2
0x420: 0300000000000000     | 	.quad 3
0x428: 0400000000000000     | 	.quad 4
0x430: 0500000000000000     | 	.quad 5
0x438: 0600000000000000     | 	.quad 6
0x440: 0700000000000000     | 	.quad 7
0x448: 0800000000000000     | 	.quad 8
0x450: 0900000000000000     | 	.quad 9
0x458: f6ffffffffffffff     | 	.quad -10
0x460: 0b00000000000000     | 	.quad 11
0x468: f4ffffffffffffff     | 	.quad -12
0x470: f3ffffffffffffff     | 	.quad -13
0x478: 0e00000000000000     | 	.quad 14
0x480: f1ffffffffffffff     | 	.quad -15
0x488: f0ffffffffffffff     | 	.quad -16
0x490: 1100000000000000     | 	.quad 17
0x498: 1200000000000000     | 	.quad 18
0x4a0: 1300000000000000     | 	.quad 19
0x4a8: ecffffffffffffff     | 	.quad -20
0x4b0: ebffffffffffffff     | 	.quad -21
0x4b8: 1600000000000000     | 	.quad 22
0x4c0: e9ffffffffffffff     | 	.quad -23
0x4c8: 1800000000000000     | 	.quad 24
0x4d0: 1900000000000000     | 	.quad 25
0x4d8: e6ffffffffffffff     | 	.quad -26
0x4e0: 1b00000000000000     | 	.quad 27
0x4e8: 1c00000000000000     | 	.quad 28
0x4f0: 1d00000000000000     | 	.quad 29
0x4f8: 1e00000000000000     | 	.quad 30
0x500: 1f00000000000000     | 	.quad 31
0x508: 2000000000000000     | 	.quad 32
0x510: dfffffffffffffff     | 	.quad -33
0x518: 2200000000000000     | 	.quad 34
0x520: ddffffffffffffff     | 	.quad -35
0x528: dcffffffffffffff     | 	.quad -36
0x530: 2500000000000000     | 	.quad 37
0x538: 2600000000000000     | 	.quad 38
0x540: 2700000000000000     | 	.quad 39
0x548: 2800000000000000     | 	.quad 40
0x550: d7ffffffffffffff     | 	.quad -41
0x558: 2a00000000000000     | 	.quad 42
0x560: 2b00000000000000     | 	.quad 43
0x568: 2c00000000000000     | 	.quad 44
0x570: 2d00000000000000     | 	.quad 45
0x578: d2ffffffffffffff     | 	.quad -46
0x580: 2f00000000000000     | 	.quad 47
0x588: d0ffffffffffffff     | 	.quad -48
0x590: cfffffffffffffff     | 	.quad -49
0x598: ceffffffffffffff     | 	.quad -50
0x5a0: cdffffffffffffff     | 	.quad -51
0x5a8: ccffffffffffffff     | 	.quad -52
0x5b0: cbffffffffffffff     | 	.quad -53
0x5b8: caffffffffffffff     | 	.quad -54
0x5c0: c9ffffffffffffff     | 	.quad -55
0x5c8: c8ffffffffffffff     | 	.quad -56
0x5d0: c7ffffffffffffff     | 	.quad -57
0x5d8: c6ffffffffffffff     | 	.quad -58
0x5e0: c5ffffffffffffff     | 	.quad -59
0x5e8: c4ffffffffffffff     | 	.quad -60
0x5f0: c3ffffffffffffff     | 	.quad -61
0x5f8: c2ffffffffffffff     | 	.quad -62
0x600: c1ffffffffffffff     | 	.quad -63
0x608: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x610:                      | 	.align 16
0x610:                      | Predest:
0x610: fadebc0000000000     | 	.quad 0xbcdefa
0x618:                      | dest:
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0: abefcd0000000000     | 	.quad 0xcdefab
0x7d8: abefcd0000000000     | 	.quad 0xcdefab
0x7e0: abefcd0000000000     | 	.quad 0xcdefab
0x7e8: abefcd0000000000     | 	.quad 0xcdefab
0x7f0: abefcd0000000000     | 	.quad 0xcdefab
0x7f8: abefcd0000000000     | 	.quad 0xcdefab
0x800: abefcd0000000000     | 	.quad 0xcdefab
0x808: abefcd0000000000     | 	.quad 0xcdefab
0x810:                      | Postdest:
0x810: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x818:                      | .align 8
                            | # Run time stack
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
0x858: 0000000000000000     | 	.quad 0
0x860: 0000000000000000     | 	.quad 0
0x868: 0000000000000000     | 	.quad 0
0x870: 0000000000000000     | 	.quad 0
0x878: 0000000000000000     | 	.quad 0
0x880: 0000000000000000     | 	.quad 0
0x888: 0000000000000000     | 	.quad 0
0x890: 0000000000000000     | 	.quad 0
                            | 
0x898:                      | Stack:
